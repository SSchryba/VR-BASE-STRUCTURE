version: '3.8'

networks:
  vr-streaming:
    driver: bridge

volumes:
  pg_data:
  redis_data:
  prometheus_data:
  grafana_data:

services:
  # --- API Gateway ---
  api-gateway:
    image: nginx:latest
    container_name: api-gateway
    volumes:
      - ./infrastructure/nginx/default.conf:/etc/nginx/conf.d/default.conf
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - auth-service
      - session-service
      - vr-streaming-engine
    networks:
      - vr-streaming
    restart: unless-stopped

  # --- Authentication Service ---
  auth-service:
    build:
      context: ./services/authentication-service
      dockerfile: Dockerfile
    container_name: auth-service
    ports:
      - "3001:3001"
    environment:
      - NODE_ENV=production
      - PORT=3001
      - DATABASE_URL=postgresql://postgres:password@postgres:5432/vr_streaming
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET=your-super-secret-jwt-key
      - CORS_ORIGINS=http://localhost:3000,http://localhost:8080
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - vr-streaming
    restart: unless-stopped

  # --- Session Management Service ---
  session-service:
    build:
      context: ./services/session-management
      dockerfile: Dockerfile
    container_name: session-service
    ports:
      - "3002:3002"
    environment:
      - NODE_ENV=production
      - PORT=3002
      - DATABASE_URL=postgresql://postgres:password@postgres:5432/vr_streaming
      - REDIS_URL=redis://redis:6379
      - CORS_ORIGINS=http://localhost:3000,http://localhost:8080
      - STREAMING_SERVICE_URL=http://vr-streaming-engine:3003
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - vr-streaming
    restart: unless-stopped

  # --- VR Streaming Engine ---
  vr-streaming-engine:
    build:
      context: ./services/vr-streaming-engine
      dockerfile: Dockerfile
    container_name: vr-streaming-engine
    ports:
      - "3003:3003"
      - "9000:9000/udp"
    environment:
      - NODE_ENV=production
      - PORT=3003
      - REDIS_URL=redis://redis:6379
      - MAX_CONCURRENT_SESSIONS=100
      - DEFAULT_QUALITY=2K
      - TARGET_FRAME_RATE=90
      - GPU_ACCELERATION=true
      - NVENC_ENABLED=true
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - vr-streaming
    restart: unless-stopped

  # --- Databases & Caches ---
  postgres:
    image: postgres:15
    container_name: postgres
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=password
      - POSTGRES_DB=vr_streaming
      - PGDATA=/var/lib/postgresql/data/pgdata
    ports:
      - "5432:5432"
    volumes:
      - pg_data:/var/lib/postgresql/data
    networks:
      - vr-streaming
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    container_name: redis
    command: redis-server --appendonly yes --maxmemory 2gb --maxmemory-policy allkeys-lru
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - vr-streaming
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  # --- Monitoring Stack ---
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
    ports:
      - "9090:9090"
    volumes:
      - ./infrastructure/monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    networks:
      - vr-streaming
    restart: unless-stopped

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123
      - GF_USERS_ALLOW_SIGN_UP=false
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
    depends_on:
      - prometheus
    networks:
      - vr-streaming
    restart: unless-stopped